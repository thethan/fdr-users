// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: Wed Nov 27 21:28:21 UTC 2019

package users

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"
	"github.com/go-kit/kit/log"
	"github.com/thethan/fdr-users/handlers"
	"github.com/thethan/fdr-users/pkg/auth"

	"github.com/go-kit/kit/endpoint"

	pb "github.com/thethan/fdr_proto"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	CreateEndpoint     endpoint.Endpoint
	SearchEndpoint     endpoint.Endpoint
	LoginEndpoint      endpoint.Endpoint
	CredentialEndpoint endpoint.Endpoint
}

// Endpoints

func NewEndpoints(logger log.Logger, auth *auth.Service) Endpoints {
	// Business domain.
	var service pb.UsersServer
	{
		service = handlers.NewService(logger, auth)
		// Wrap Service with middlewares. See handlers/middlewares.go
		//service = handlers.WrapService(service)
	}

	// Endpoint domain.
	var (
		createEndpoint         = MakeCreateEndpoint(service)
		searchEndpoint         = MakeSearchEndpoint(service)
		loginEndpoint          = MakeLoginEndpoint(service)
		getCredentialsEndpoint = MakeCredentialsEndpoint(service)
	)

	endpoints := Endpoints{
		CreateEndpoint:     createEndpoint,
		SearchEndpoint:     searchEndpoint,
		LoginEndpoint:      loginEndpoint,
		CredentialEndpoint: getCredentialsEndpoint,
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	return endpoints
}

func (e Endpoints) Create(ctx context.Context, in *pb.CreateUserRequest) (*pb.CreateUserResponse, error) {
	//return e.CreateEndpoint(ctx, in)
	return nil, nil
}

func (e Endpoints) Search(ctx context.Context, in *pb.ListUserRequest) (*pb.ListUserResponse, error) {
	//return e.SearchEndpoint(ctx, in)
	return nil, nil
}

func (e Endpoints) Login(ctx context.Context, in *pb.LoginRequest) (*pb.LoginResponse, error) {
	//e.LoginEndpoint(ctx, in)
	return nil, nil
}

func (e Endpoints) Credentials(ctx context.Context, in *pb.CredentialRequest) (*pb.CredentialResponse, error) {
	//e.LoginEndpoint(ctx, in)
	return nil, nil
}

// Make Endpoints

func MakeCreateEndpoint(s pb.UsersServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CreateUserRequest)
		v, err := s.Create(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeSearchEndpoint(s pb.UsersServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.ListUserRequest)
		v, err := s.Search(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeLoginEndpoint(s pb.UsersServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.LoginRequest)
		v, err := s.Login(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeCredentialsEndpoint(s pb.UsersServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CredentialRequest)
		v, err := s.Credentials(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"Create":      struct{}{},
		"Search":      struct{}{},
		"Login":       struct{}{},
		"Credentials": struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "Create" {
			e.CreateEndpoint = middleware(e.CreateEndpoint)
		}
		if inc == "Search" {
			e.SearchEndpoint = middleware(e.SearchEndpoint)
		}
		if inc == "Login" {
			e.LoginEndpoint = middleware(e.LoginEndpoint)
		}
		if inc == "Credentials" {
			e.CredentialEndpoint = middleware(e.CredentialEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"Create": struct{}{},
		"Search": struct{}{},
		"Login":  struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "Create" {
			e.CreateEndpoint = middleware("Create", e.CreateEndpoint)
		}
		if inc == "Search" {
			e.SearchEndpoint = middleware("Search", e.SearchEndpoint)
		}
		if inc == "Login" {
			e.LoginEndpoint = middleware("Login", e.LoginEndpoint)
		}
	}
}
