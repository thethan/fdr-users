// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: Wed Nov 27 21:28:21 UTC 2019

package server

import (
	"flag"
	"fmt"
	"github.com/go-kit/kit/log"
	"github.com/gorilla/mux"
	"github.com/markbates/goth"
	"github.com/thethan/fdr-users/pkg/auth"
	"github.com/thethan/fdr-users/pkg/auth/transports"
	"github.com/thethan/fdr-users/pkg/gothic/yahoo"

	"net"
	"net/http"
	"net/http/pprof"
	"os"

	// 3d Party
	"google.golang.org/grpc"

	"github.com/thethan/fdr-users/handlers"
	"github.com/thethan/fdr-users/pkg/users"
	// This Service
	pb "github.com/thethan/fdr_proto"
)

var DefaultConfig Config

func init() {
	flag.StringVar(&DefaultConfig.DebugAddr, "debug.addr", ":8080", "Debug and metrics listen address")
	flag.StringVar(&DefaultConfig.HTTPAddr, "http.addr", ":80", "HTTP listen address")
	flag.StringVar(&DefaultConfig.GRPCAddr, "grpc.addr", ":8082", "gRPC (HTTP) listen address")

	// Use environment variables, if set. Flags have priority over Env vars.
	if addr := os.Getenv("DEBUG_ADDR"); addr != "" {
		DefaultConfig.DebugAddr = addr
	}
	if port := os.Getenv("PORT"); port != "" {
		DefaultConfig.HTTPAddr = fmt.Sprintf(":%s", port)
	}
	if addr := os.Getenv("HTTP_ADDR"); addr != "" {
		DefaultConfig.HTTPAddr = addr
	}
	if addr := os.Getenv("GRPC_ADDR"); addr != "" {
		DefaultConfig.GRPCAddr = addr
	}
}

// Config contains the required fields for running a server
type Config struct {
	HTTPAddr  string
	DebugAddr string
	GRPCAddr  string
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {


	yahooProvider := yahoo.New(os.Getenv("YAHOO_KEY"), os.Getenv("YAHOO_SECRET"), os.Getenv("YAHOO_CALLBACK"))
	yahooProvider.SetName("yahoo")
	goth.UseProviders(
		yahooProvider,
	)
	authEndpoint := auth.NewEndpoints(yahooProvider)

	logger := log.NewJSONLogger(log.NewSyncWriter(os.Stdout))
	logger = log.WithPrefix(logger, "caller_a", log.DefaultCaller, "caller_b", log.Caller(2), "caller_c",log.Caller(1))

	authService := auth.NewService(logger, yahooProvider)

	endpoints := users.NewEndpoints(logger, &authService)
	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
		logger.Log("transport", "debug", "addr", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// HTTP transport.
	go func() {
		logger.Log("transport", "HTTP", "addr", cfg.HTTPAddr)
		m := mux.NewRouter()

		m = users.MakeHTTPHandler(endpoints, m)
		m = transports.MakeHTTPHandler(authEndpoint, m)

		m.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {

			fmt.Println(route.GetName())
			fmt.Println(route.GetPathRegexp())
			fmt.Println(route.GetMethods())
			return nil
		})

		errc <- http.ListenAndServe(cfg.HTTPAddr, m)
	}()

	// gRPC transport.
	go func() {
		logger.Log("transport", "gRPC", "addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := users.MakeGRPCServer(endpoints)
		s := grpc.NewServer()
		pb.RegisterUsersServer(s, srv)

		errc <- s.Serve(ln)
	}()

	// Run!
	logger.Log("exit", <-errc)
}
